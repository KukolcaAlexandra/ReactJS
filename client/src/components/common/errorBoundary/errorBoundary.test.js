import React from 'react';
import { shallow, mount } from 'enzyme';
import ErrorBoundary from './errorBoundary.component';

function ProblemChild() {
  throw new Error('Error thrown from problem child');
}

describe('ErrorBoundary component', () => {
  it('ErrorBoundary component should be render correctly', () => {
    const component = shallow(
      <ErrorBoundary>
        <div>some</div>
      </ErrorBoundary>,
    );
    expect(component).toMatchSnapshot();
  });

  it('should catch errors with componentDidCatch', () => {
    const component = mount(<ErrorBoundary><ProblemChild /></ErrorBoundary>);
    expect(ErrorBoundary.prototype.componentDidCatch).toHaveBeenCalled();
    expect(component).toMatchSnapshot();
  });

  it('ErrorBoundary should displays error message on error generated by child', () => {
    const Something = () => null;
    const component = mount(<ErrorBoundary><Something /></ErrorBoundary>);
    const error = new Error('test');
    component.find(Something).simulateError(error);
    expect(component.state('hasError')).toBeFalsy();
  });
});
