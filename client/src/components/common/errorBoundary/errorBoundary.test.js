import React from 'react';
import ErrorBoundary from './errorBoundary.component';
import {shallow, mount, configure, sinon} from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';

configure({ adapter: new Adapter() });

function ProblemChild() {
  throw new Error('Error thrown from problem child');
  return <div>Error</div>; // eslint-disable-line
}

describe('ErrorBoundary component', () => {
  
  it('ErrorBoundary component should be render correctly', () => {
    const component = shallow(
      <ErrorBoundary>
        <div>some</div>
      </ErrorBoundary>
      );
      expect(component).toMatchSnapshot();
  });
/*
  it('ErrorBoundary should displays error message on error generated by child', () => {
    const Something = () => null;
    const wrapper = mount(
      <ErrorBoundary>
        <Something />
      </ErrorBoundary>
    );

    const error = new Error('test');
    wrapper.instance.componentDidCatch = jest.fn();

    wrapper.find(Something).simulateError(error);
    console.log(wrapper.debug() );
  });*/

  it('ErrorBoundary should displays error message on error generated by child', () => {
    const Something = () => null;
    const wrapper = mount(
      <ErrorBoundary>
        <Something />
      </ErrorBoundary>
    );

    const error = new Error('test');
    wrapper.instance.getDerivedStateFromError = jest.fn();

    wrapper.find(Something).simulateError(error);
    //wrapper.getDerivedStateFromError(error);
    expect(wrapper.state('hasError')).toBeFalsy();
    //console.log(wrapper.debug() );
  });

})